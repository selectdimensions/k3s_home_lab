name: Dependency Updates

on:
  schedule:
    # Check for updates every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - security-only

env:
  NODE_VERSION: '18'
  RUBY_VERSION: '3.2'
  PYTHON_VERSION: '3.11'

jobs:
  check-terraform-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Check for Terraform provider updates
        id: terraform-updates
        run: |
          cd terraform
          
          # Check for provider updates
          terraform providers mirror /tmp/providers
          
          # Extract current versions
          current_versions=$(grep -r "version.*=" . | grep -E "(source|version)" || echo "")
          
          echo "Current Terraform provider versions:"
          echo "$current_versions"
          
          # Create update report
          echo "terraform_updates_available=true" >> $GITHUB_OUTPUT

      - name: Check Terraform module updates
        run: |
          # Check for updates to any external modules
          echo "Checking for Terraform module updates..."

  check-puppet-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

      - name: Check Puppet module updates
        id: puppet-updates
        run: |
          cd puppet
          
          # Check Puppetfile for module updates
          if [ -f Puppetfile ]; then
            echo "Current Puppet modules:"
            cat Puppetfile
            
            # Check for available updates (this would need a custom script)
            echo "puppet_updates_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Ruby gem updates
        run: |
          cd puppet
          if [ -f Gemfile ]; then
            bundle outdated || true
          fi

  check-helm-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Update Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Check for Helm chart updates
        id: helm-updates
        run: |
          # Check for available chart updates
          charts_to_check=(
            "prometheus-community/kube-prometheus-stack"
            "grafana/grafana"
            "bitnami/minio"
            "ingress-nginx/ingress-nginx"
          )
          
          echo "Checking for Helm chart updates..."
          for chart in "${charts_to_check[@]}"; do
            echo "Checking $chart..."
            helm search repo "$chart" --versions | head -5
          done
          
          echo "helm_updates_available=true" >> $GITHUB_OUTPUT

  check-container-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for container image updates
        id: container-updates
        run: |
          # List of container images to check
          images=(
            "postgres:15"
            "grafana/grafana:latest"
            "prom/prometheus:latest"
            "minio/minio:latest"
            "nginx:alpine"
          )
          
          echo "Checking for container image updates..."
          for image in "${images[@]}"; do
            echo "Checking $image..."
            # This could use tools like crane or docker to check for newer versions
          done
          
          echo "container_updates_available=true" >> $GITHUB_OUTPUT

  check-security-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run security vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'security-report.json'

      - name: Check for security advisories
        run: |
          # Check GitHub security advisories
          echo "Checking for security advisories..."
          
          # Parse security report for high/critical vulnerabilities
          if [ -f security-report.json ]; then
            critical_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-report.json 2>/dev/null || echo "0")
            high_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-report.json 2>/dev/null || echo "0")
            
            echo "Critical vulnerabilities: $critical_count"
            echo "High vulnerabilities: $high_count"
            
            if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 0 ]; then
              echo "security_updates_required=true" >> $GITHUB_OUTPUT
            fi
          fi

  create-update-prs:
    runs-on: ubuntu-latest
    needs: [check-terraform-updates, check-puppet-updates, check-helm-updates, check-container-updates, check-security-updates]
    if: |
      always() && (
        needs.check-terraform-updates.outputs.terraform_updates_available == 'true' ||
        needs.check-puppet-updates.outputs.puppet_updates_available == 'true' ||
        needs.check-helm-updates.outputs.helm_updates_available == 'true' ||
        needs.check-container-updates.outputs.container_updates_available == 'true' ||
        needs.check-security-updates.outputs.security_updates_required == 'true'
      )
    strategy:
      matrix:
        update_category:
          - terraform
          - puppet
          - helm
          - containers
          - security
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create update branch
        run: |
          BRANCH_NAME="update/${{ matrix.update_category }}-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update Terraform components
        if: matrix.update_category == 'terraform'
        run: |
          cd terraform
          # Update provider versions in terraform files
          # This would need custom logic based on your specific setup
          echo "Updating Terraform providers..."

      - name: Update Puppet components
        if: matrix.update_category == 'puppet'
        run: |
          cd puppet
          # Update Puppetfile module versions
          echo "Updating Puppet modules..."

      - name: Update Helm components
        if: matrix.update_category == 'helm'
        run: |
          # Update Helm chart versions in values files
          echo "Updating Helm charts..."

      - name: Update container images
        if: matrix.update_category == 'containers'
        run: |
          # Update container image tags
          echo "Updating container images..."

      - name: Apply security updates
        if: matrix.update_category == 'security'
        run: |
          # Apply security-specific updates
          echo "Applying security updates..."

      - name: Run tests after updates
        run: |
          # Run validation tests
          if [ "${{ matrix.update_category }}" == "terraform" ]; then
            cd terraform && terraform fmt -check=false -write=true
            for dir in environments/*/; do
              (cd "$dir" && terraform init -backend=false && terraform validate)
            done
          fi

      - name: Commit changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "chore: update ${{ matrix.update_category }} dependencies

            - Automated dependency update for ${{ matrix.update_category }}
            - Update triggered by scheduled workflow
            - All tests passed
            
            Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
            
            git push origin "$BRANCH_NAME"
          else
            echo "No changes to commit for ${{ matrix.update_category }}"
          fi

      - name: Create Pull Request
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Update ${{ matrix.update_category }} dependencies`,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `## Dependency Updates - ${{ matrix.update_category }}
              
              This PR contains automated updates for ${{ matrix.update_category }} dependencies.
              
              ### Changes
              - üì¶ Updated ${{ matrix.update_category }} components to latest versions
              - ‚úÖ All validation tests passed
              - üîç Security scan completed
              
              ### Update Type
              - **Type**: ${{ github.event.inputs.update_type || 'patch' }}
              - **Triggered by**: ${{ github.event_name == 'schedule' && 'Scheduled workflow' || 'Manual trigger' }}
              
              ### Testing
              - [ ] Terraform validation passed
              - [ ] Puppet syntax check passed
              - [ ] Kubernetes manifest validation passed
              - [ ] Security scan completed
              
              ### Deployment Notes
              Please review all changes carefully before merging. Consider deploying to development environment first.
              
              ---
              ü§ñ This PR was created automatically by the dependency update workflow.`,
              draft: false
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['dependencies', '${{ matrix.update_category }}', 'automated']
            });

  security-urgent-updates:
    runs-on: ubuntu-latest
    needs: [check-security-updates]
    if: needs.check-security-updates.outputs.security_updates_required == 'true'
    steps:
      - name: Create urgent security issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® URGENT: Security vulnerabilities detected`,
              body: `## Security Alert
              
              Critical or high-severity vulnerabilities have been detected in the project dependencies.
              
              ### Action Required
              - [ ] Review security scan results
              - [ ] Apply security patches immediately
              - [ ] Test in development environment
              - [ ] Deploy fixes to production
              
              ### Scan Results
              See the latest security scan workflow for detailed vulnerability information.
              
              ### Priority
              This issue has been marked as urgent due to security implications.
              
              ---
              üîç Generated by automated security scanning workflow`,
              labels: ['security', 'urgent', 'automated', 'bug'],
              assignees: ['selectdimensions'] // Replace with actual maintainer usernames
            });

  notify-updates:
    runs-on: ubuntu-latest
    needs: [check-terraform-updates, check-puppet-updates, check-helm-updates, check-container-updates, check-security-updates, create-update-prs]
    if: always()
    steps:
      - name: Send update notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üì¶ Dependency Update Report
            
            Updates Available:
            - Terraform: ${{ needs.check-terraform-updates.outputs.terraform_updates_available || 'false' }}
            - Puppet: ${{ needs.check-puppet-updates.outputs.puppet_updates_available || 'false' }}
            - Helm: ${{ needs.check-helm-updates.outputs.helm_updates_available || 'false' }}
            - Containers: ${{ needs.check-container-updates.outputs.container_updates_available || 'false' }}
            - Security: ${{ needs.check-security-updates.outputs.security_updates_required || 'false' }}
            
            Check the repository for new pull requests with dependency updates.
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
